Description: Set Debian specific paths: https://wiki.debian.org/Games/Checklist
Forwarded: not-needed
--- a/SamTFE/Sources/CMakeLists.txt	2024-01-16 19:22:10.000000000 +0300
+++ b/SamTFE/Sources/CMakeLists.txt	2024-02-28 20:02:20.589328477 +0300
@@ -135,7 +135,8 @@
       set(RPATH_SETTINGS "-rpath=/var/tmp/portage")
       message(STATUS "Build for Gentoo with '-rpath=/var/tmp/portage'")
     else()
-      set(RPATH_SETTINGS "-rpath,$ORIGIN")
+      set(RPATH_SETTINGS "-rpath=/usr/lib/games/${INTERNAL_NAME}")
+      message(STATUS "Build for Debian with '-rpath=/usr/lib/games/${INTERNAL_NAME}'")
     endif()
 endif()
 if(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" OR CMAKE_SYSTEM_NAME STREQUAL "OpenBSD" OR CMAKE_SYSTEM_NAME STREQUAL "NetBSD")
@@ -306,10 +307,9 @@
 message(STATUS "Operating system name: ${CMAKE_OS_NAME}")
 
 set(CMAKE_ARCH_BITS 32)
-set(CMAKE_INSTALL_LIBDIR "/usr/lib")
+set(CMAKE_INSTALL_LIBDIR "/usr/lib/games")
 if(CMAKE_SIZEOF_VOID_P EQUAL 8)
     set(CMAKE_ARCH_BITS 64)
-    set(CMAKE_INSTALL_LIBDIR "/usr/lib64")
 endif()
 
 if(FREEBSD)
@@ -321,33 +321,6 @@
 endif()
 
 message(STATUS "Arch bits: ${CMAKE_ARCH_BITS}")
-
-if(DEBIAN_FOUND OR UBUNTU_FOUND)
-    #set libdir for debian based OS
-    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "riscv64")
-        set(CMAKE_INSTALL_LIBDIR "/usr/lib/riscv64-linux-gnu")
-    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm.*|ARM.*)")  # 32bit)
-        set(CMAKE_INSTALL_LIBDIR "/usr/lib/arm-linux-gnueabihf")
-    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64.*|AARCH64.*)")
-        set(CMAKE_INSTALL_LIBDIR "/usr/lib/aarch64-linux-gnu")
-        if(NOT "${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
-            message(FATAL_ERROR "invalid pointer size")
-        endif()
-    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64")
-        set(CMAKE_INSTALL_LIBDIR "/usr/lib/powerpc64-linux-gnu")
-    elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL s390x)
-        set(CMAKE_INSTALL_LIBDIR "/usr/lib/s390x-linux-gnu")
-    elseif((CMAKE_SYSTEM_PROCESSOR MATCHES "i386|i686|x86|amd64|AMD64") AND (CMAKE_SIZEOF_VOID_P EQUAL 4))
-        set(CMAKE_INSTALL_LIBDIR "/usr/lib/i386-linux-gnu")
-    elseif((CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|amd64|AMD64") AND (CMAKE_SIZEOF_VOID_P EQUAL 8))
-        set(CMAKE_INSTALL_LIBDIR "/usr/lib/x86_64-linux-gnu")
-    elseif((CMAKE_SYSTEM_PROCESSOR MATCHES "i386") AND (CMAKE_SIZEOF_VOID_P EQUAL 8) AND (APPLE))
-        set(CMAKE_INSTALL_LIBDIR "/usr/lib/i386-linux-gnu")
-    else()
-        message(FATAL_ERROR "Unknown architecture")
-    endif()
-endif()
-
 message(STATUS "Installed libraries dir: ${CMAKE_INSTALL_LIBDIR}")
 
 ## ** RAKE! start compiler specific flags section **
@@ -355,6 +355,11 @@
 ## ** RAKE! clean up for SeriousEngine use. Also  **
 ## ** RAKE! need to make this pandora safe.	  **
 # compiler specific flags
+if((CMAKE_SYSTEM_PROCESSOR MATCHES "i386|i586|i686") AND (CMAKE_SIZEOF_VOID_P EQUAL 4))
+  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mmmx")
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmmx")
+endif()
+
 if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "AppleClang")
 	# This section and the like are for flags/defines that can be shared between 
 	# c and c++ compile options
@@ -372,9 +345,9 @@
 			add_compile_options(-mpowerpc64)
 		else()
             if(LOCAL_INSTALL)
-			    add_compile_options(-march=native)
+			    add_compile_options(-mtune=generic)
             elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "i386|i586|i686|x86|amd64|AMD64|x86_64")
-			    add_compile_options(-march=native) # set mtune=generic if nedded
+			    add_compile_options(-mtune=generic) # set mtune=generic if nedded
 		    endif()
 		endif()
 	endif()
@@ -624,7 +629,7 @@
 if(NOT ECC)
     add_parser_and_scanner("Ecc/Parser" "Ecc/Scanner")
     add_executable(ecc Ecc/Main.cpp Ecc/Parser.cpp Ecc/Parser.h Ecc/Scanner.cpp)
-    set(ECC "ecc")
+    set(ECC "${CMAKE_CURRENT_BINARY_DIR}/ecc")
 endif()
 
 macro(entity _NAME)
@@ -1265,39 +1238,9 @@
     ${ADDITIONAL_ENGINE_SRCS}
     ${ZLIB_SRCS}
 )
-set(ENGINELIB "Engine${MP}${DEBUGSUFFIX}")
-add_library(${ENGINELIB} SHARED
-     ${ENGINE_SRCS}
-)
-if(MACOSX)
-    target_link_libraries(${ENGINELIB} "-undefined dynamic_lookup")
-endif()
-add_dependencies(${ENGINELIB} ParseEntities${MP})
-target_link_libraries(${ENGINELIB} engine_safemath${MP})
-if(FREEBSD)
-target_link_libraries(${ENGINELIB} ${SDL2_LIBRARY})
-target_link_libraries(${ENGINELIB} ${ZLIB_LIBRARIES})
-endif()
-if(MACOSX)
-    if(USE_SYSTEM_SDL2) # use sdl2 framework on system
-      target_link_libraries(${ENGINELIB} ${SDL2_LIBRARY})
-    else() # use local libsdl2
-	  find_library(COCOA_FRAMEWORK Cocoa)
-      target_link_libraries(${ENGINELIB} "${COCOA_FRAMEWORK}")
-      target_link_libraries(${ENGINELIB} "${CMAKE_CURRENT_SOURCE_DIR}/lib/macosx/libSDL2-2.0.0.dylib")
-    endif()
-target_link_libraries(${ENGINELIB} ${ZLIB_LIBRARIES})
-endif()
-if(PANDORA)
-    target_link_libraries(${ENGINELIB} "rt")
-endif()
-if(RPI4)
-    target_link_libraries(${ENGINELIB} "rt")
-endif()
-set_target_properties(${ENGINELIB} PROPERTIES ENABLE_EXPORTS ON LINK_FLAGS "-Wl,${RPATH_SETTINGS}")
 
 add_executable(SeriousSam${MP}
-    #${ENGINE_SRCS}
+    ${ENGINE_SRCS}
     SeriousSam/LevelInfo.cpp
     SeriousSam/CmdLine.cpp
     SeriousSam/SeriousSam.cpp
@@ -1311,7 +1254,7 @@
     SeriousSam/MenuGadgets.cpp
     SeriousSam/MenuPrinting.cpp
 )
-target_link_libraries(SeriousSam${MP} ${ENGINELIB})
+target_link_libraries(SeriousSam${MP} engine_safemath)
 add_dependencies(SeriousSam${MP} ParseEntities${MP})
 # Make symbols in the main executable available to dynamic objects
 set_target_properties(SeriousSam${MP} PROPERTIES ENABLE_EXPORTS ON)
@@ -1322,8 +1265,8 @@
 # !!! FIXME:  that's a better plan and we can remove the toggle here.
 option(BUILD_DEDICATED_SERVER "Compile the dedicated server, too" TRUE)
 if(BUILD_DEDICATED_SERVER)
-    add_executable(DedicatedServer${MP} DedicatedServer/DedicatedServer.cpp)
-    target_link_libraries(DedicatedServer${MP} ${ENGINELIB})
+    add_executable(DedicatedServer${MP} ${ENGINE_SRCS} DedicatedServer/DedicatedServer.cpp)
+    target_link_libraries(DedicatedServer${MP} engine_safemath)
     add_dependencies(DedicatedServer${MP} ParseEntities${MP})
     # Make symbols in the main executable available to dynamic objects
     set_target_properties(DedicatedServer${MP} PROPERTIES ENABLE_EXPORTS ON)
@@ -1331,8 +1274,8 @@
 
 option(BUILD_MAKEFONT "Compile the MakeFONT, too" TRUE)
 if(BUILD_MAKEFONT)
-    add_executable(MakeFONT${MP} MakeFONT/MakeFONT.cpp)
-    target_link_libraries(MakeFONT${MP} ${ENGINELIB})
+    add_executable(MakeFONT${MP} ${ENGINE_SRCS} MakeFONT/MakeFONT.cpp)
+    target_link_libraries(MakeFONT${MP} engine_safemath)
     add_dependencies(MakeFONT${MP} ParseEntities${MP})
     # Make symbols in the main executable available to dynamic objects
     set_target_properties(MakeFONT${MP} PROPERTIES ENABLE_EXPORTS ON)
@@ -1340,8 +1283,8 @@
 
 option(BUILD_TEXConv "Compile the TEXConv, too" TRUE)
 if(BUILD_TEXConv)
-    add_executable(TEXConv${MP} TEXConv/TEXConv.cpp)
-    target_link_libraries(TEXConv${MP} ${ENGINELIB})
+    add_executable(TEXConv${MP} ${ENGINE_SRCS} TEXConv/TEXConv.cpp)
+    target_link_libraries(TEXConv${MP} engine_safemath)
     add_dependencies(TEXConv${MP} ParseEntities${MP})
     # Make symbols in the main executable available to dynamic objects
     set_target_properties(TEXConv${MP} PROPERTIES ENABLE_EXPORTS ON)
@@ -1525,7 +1468,7 @@
 # NOT LOCAL INSTALL
 elseif(NOT LOCAL_INSTALL AND NOT XPLUS)
 if(DEBUG) # RAKE! Will this work with TFE?
-    install(TARGETS SeriousSam${MP} ${SHADERSLIB} ${GAMEMPLIB} ${ENTITIESMPLIB} ${ENGINELIB}
+    install(TARGETS SeriousSam${MP} ${SHADERSLIB} ${GAMEMPLIB} ${ENTITIESMPLIB}
             RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin"
             LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin/Debug"
             PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
@@ -1551,25 +1494,22 @@
     endif()
 else()
     install(TARGETS SeriousSam${MP} ${SHADERSLIB} ${GAMEMPLIB} ${ENTITIESMPLIB}
-            RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin"
+            RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/games"
             LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}/${INTERNAL_NAME}"
             PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
-    install(TARGETS ${ENGINELIB}
-            LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
-            PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     if(BUILD_DEDICATED_SERVER)
         install(TARGETS DedicatedServer${MP}
-                RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin"
+                RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/games"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
     if(BUILD_MAKEFONT)
         install(TARGETS MakeFONT${MP}
-                RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin"
+                RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/games"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
     if(BUILD_TEXConv)
         install(TARGETS TEXConv${MP}
-                RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin"
+                RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/games"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
     if(BUILD_AMP11LIB)
@@ -1587,11 +1527,12 @@
 # RAKE! If CMAKE_INSTALL_PREFIX was set during config then its not a local install
 # and SE1_10.gro needs to be installed to Games root dir.
 if(NOT LOCAL_INSTALL AND NOT XPLUS)
-    install(FILES ${CMAKE_ADD_TARGET_DIR}/../SE1_10b.gro
-            DESTINATION "${CMAKE_INSTALL_PREFIX}/share/${INTERNAL_NAME}"
+  if(INTERNAL_NAME STREQUAL "serioussam")
+    install(FILES "${CMAKE_ADD_TARGET_DIR}/../${INTERNAL_NAME}.desktop" RENAME "io.github.tx00100xt.serioussam.desktop"
+            DESTINATION "${CMAKE_INSTALL_PREFIX}/share/applications"
             PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
-    install(FILES "${CMAKE_ADD_TARGET_DIR}/../${INTERNAL_NAME}.desktop"
-            DESTINATION "${CMAKE_INSTALL_PREFIX}//share/applications"
+    install(FILES "${CMAKE_ADD_TARGET_DIR}/../../debian/io.github.tx00100xt.serioussam.appdata.xml"
+            DESTINATION "${CMAKE_INSTALL_PREFIX}/share/metainfo"
             PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
     set(A 16)
     set(B 32)
@@ -1605,9 +1546,14 @@
             OUTPUT_VARIABLE outVar
        )
        install(FILES ${CMAKE_ADD_TARGET_DIR}/../${X}.png
-               DESTINATION "${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/${X}x${X}/apps" RENAME "${INTERNAL_NAME}.png"
+               DESTINATION "${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/${X}x${X}/apps" RENAME "io.github.tx00100xt.${INTERNAL_NAME}.png"
                PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
 	endforeach()
+  else()
+    install(FILES "${CMAKE_ADD_TARGET_DIR}/../${INTERNAL_NAME}.desktop" RENAME "io.github.tx00100xt.serioussamse.desktop"
+            DESTINATION "${CMAKE_INSTALL_PREFIX}/share/applications"
+            PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
+  endif()
 endif()
 
 # end of CMakeLists.txt ...
--- a/SamTSE/Sources/CMakeLists.txt	2024-01-16 19:22:10.000000000 +0300
+++ b/SamTSE/Sources/CMakeLists.txt	2024-02-28 20:03:48.398429633 +0300
@@ -135,7 +135,8 @@
       set(RPATH_SETTINGS "-rpath=/var/tmp/portage")
       message(STATUS "Build for Gentoo with '-rpath=/var/tmp/portage'")
     else()
-      set(RPATH_SETTINGS "-rpath,$ORIGIN")
+      set(RPATH_SETTINGS "-rpath=/usr/lib/games/${INTERNAL_NAME}")
+      message(STATUS "Build for Debian with '-rpath=/usr/lib/games/${INTERNAL_NAME}'")
     endif()
 endif()
 if(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" OR CMAKE_SYSTEM_NAME STREQUAL "OpenBSD" OR CMAKE_SYSTEM_NAME STREQUAL "NetBSD")
@@ -306,10 +307,9 @@
 message(STATUS "Operating system name: ${CMAKE_OS_NAME}")
 
 set(CMAKE_ARCH_BITS 32)
-set(CMAKE_INSTALL_LIBDIR "/usr/lib")
+set(CMAKE_INSTALL_LIBDIR "/usr/lib/games")
 if(CMAKE_SIZEOF_VOID_P EQUAL 8)
     set(CMAKE_ARCH_BITS 64)
-    set(CMAKE_INSTALL_LIBDIR "/usr/lib64")
 endif()
 
 if(FREEBSD)
@@ -321,33 +321,6 @@
 endif()
 
 message(STATUS "Arch bits: ${CMAKE_ARCH_BITS}")
-
-if(DEBIAN_FOUND OR UBUNTU_FOUND)
-    #set libdir for debian based OS
-    if(${CMAKE_SYSTEM_PROCESSOR} MATCHES "riscv64")
-        set(CMAKE_INSTALL_LIBDIR "/usr/lib/riscv64-linux-gnu")
-    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm.*|ARM.*)")  # 32bit)
-        set(CMAKE_INSTALL_LIBDIR "/usr/lib/arm-linux-gnueabihf")
-    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64.*|AARCH64.*)")
-        set(CMAKE_INSTALL_LIBDIR "/usr/lib/aarch64-linux-gnu")
-        if(NOT "${CMAKE_SIZEOF_VOID_P}" EQUAL "8")
-            message(FATAL_ERROR "invalid pointer size")
-        endif()
-    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(powerpc|ppc)64")
-        set(CMAKE_INSTALL_LIBDIR "/usr/lib/powerpc64-linux-gnu")
-    elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL s390x)
-        set(CMAKE_INSTALL_LIBDIR "/usr/lib/s390x-linux-gnu")
-    elseif((CMAKE_SYSTEM_PROCESSOR MATCHES "i386|i686|x86|amd64|AMD64") AND (CMAKE_SIZEOF_VOID_P EQUAL 4))
-        set(CMAKE_INSTALL_LIBDIR "/usr/lib/i386-linux-gnu")
-    elseif((CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64|amd64|AMD64") AND (CMAKE_SIZEOF_VOID_P EQUAL 8))
-        set(CMAKE_INSTALL_LIBDIR "/usr/lib/x86_64-linux-gnu")
-    elseif((CMAKE_SYSTEM_PROCESSOR MATCHES "i386") AND (CMAKE_SIZEOF_VOID_P EQUAL 8) AND (APPLE))
-        set(CMAKE_INSTALL_LIBDIR "/usr/lib/i386-linux-gnu")
-    else()
-        message(FATAL_ERROR "Unknown architecture")
-    endif()
-endif()
-
 message(STATUS "Installed libraries dir: ${CMAKE_INSTALL_LIBDIR}")
 
 ## ** RAKE! start compiler specific flags section **
@@ -355,6 +355,11 @@
 ## ** RAKE! clean up for SeriousEngine use. Also  **
 ## ** RAKE! need to make this pandora safe.	  **
 # compiler specific flags
+if((CMAKE_SYSTEM_PROCESSOR MATCHES "i386|i586|i686") AND (CMAKE_SIZEOF_VOID_P EQUAL 4))
+  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mmmx")
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmmx")
+endif()
+
 if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "AppleClang")
 	# This section and the like are for flags/defines that can be shared between 
 	# c and c++ compile options
@@ -372,9 +345,9 @@
 			add_compile_options(-mpowerpc64)
 		else()
             if(LOCAL_INSTALL)
-			    add_compile_options(-march=native)
+			    add_compile_options(-mtune=generic)
             elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "i386|i586|i686|x86|amd64|AMD64|x86_64")
-			    add_compile_options(-march=native) # set mtune=generic if nedded
+			    add_compile_options(-mtune=generic) # set mtune=generic if nedded
 		    endif()
 		endif()
 	endif()
@@ -624,7 +629,7 @@
 if(NOT ECC)
     add_parser_and_scanner("Ecc/Parser" "Ecc/Scanner")
     add_executable(ecc-se Ecc/Main.cpp Ecc/Parser.cpp Ecc/Parser.h Ecc/Scanner.cpp)
-    set(ECC-SE "ecc-se")
+    set(ECC-SE "${CMAKE_CURRENT_BINARY_DIR}/ecc-se")
 endif()
 
 macro(entity _NAME)
@@ -1265,39 +1238,9 @@
     ${ADDITIONAL_ENGINE_SRCS}
     ${ZLIB_SRCS}
 )
-set(ENGINELIB "Engine${MP}${DEBUGSUFFIX}")
-add_library(${ENGINELIB} SHARED
-     ${ENGINE_SRCS}
-)
-if(MACOSX)
-    target_link_libraries(${ENGINELIB} "-undefined dynamic_lookup")
-endif()
-add_dependencies(${ENGINELIB} ParseEntities${MP})
-target_link_libraries(${ENGINELIB} engine_safemath${MP})
-if(FREEBSD)
-target_link_libraries(${ENGINELIB} ${SDL2_LIBRARY})
-target_link_libraries(${ENGINELIB} ${ZLIB_LIBRARIES})
-endif()
-if(MACOSX)
-    if(USE_SYSTEM_SDL2) # use sdl2 framework on system
-      target_link_libraries(${ENGINELIB} ${SDL2_LIBRARY})
-    else() # use local libsdl2
-	  find_library(COCOA_FRAMEWORK Cocoa)
-      target_link_libraries(${ENGINELIB} "${COCOA_FRAMEWORK}")
-      target_link_libraries(${ENGINELIB} "${CMAKE_CURRENT_SOURCE_DIR}/lib/macosx/libSDL2-2.0.0.dylib")
-    endif()
-target_link_libraries(${ENGINELIB} ${ZLIB_LIBRARIES})
-endif()
-if(PANDORA)
-    target_link_libraries(${ENGINELIB} "rt")
-endif()
-if(RPI4)
-    target_link_libraries(${ENGINELIB} "rt")
-endif()
-set_target_properties(${ENGINELIB} PROPERTIES ENABLE_EXPORTS ON LINK_FLAGS "-Wl,${RPATH_SETTINGS}")
 
 add_executable(SeriousSam${MP}
-    #${ENGINE_SRCS}
+    ${ENGINE_SRCS}
     SeriousSam/LevelInfo.cpp
     SeriousSam/CmdLine.cpp
     SeriousSam/SeriousSam.cpp
@@ -1311,7 +1254,7 @@
     SeriousSam/MenuGadgets.cpp
     SeriousSam/MenuPrinting.cpp
 )
-target_link_libraries(SeriousSam${MP} ${ENGINELIB})
+target_link_libraries(SeriousSam${MP} engine_safemath)
 add_dependencies(SeriousSam${MP} ParseEntities${MP})
 # Make symbols in the main executable available to dynamic objects
 set_target_properties(SeriousSam${MP} PROPERTIES ENABLE_EXPORTS ON)
@@ -1322,8 +1265,8 @@
 # !!! FIXME:  that's a better plan and we can remove the toggle here.
 option(BUILD_DEDICATED_SERVER "Compile the dedicated server, too" TRUE)
 if(BUILD_DEDICATED_SERVER)
-    add_executable(DedicatedServer${MP} DedicatedServer/DedicatedServer.cpp)
-    target_link_libraries(DedicatedServer${MP} ${ENGINELIB})
+    add_executable(DedicatedServer${MP} ${ENGINE_SRCS} DedicatedServer/DedicatedServer.cpp)
+    target_link_libraries(DedicatedServer${MP} engine_safemath)
     add_dependencies(DedicatedServer${MP} ParseEntities${MP})
     # Make symbols in the main executable available to dynamic objects
     set_target_properties(DedicatedServer${MP} PROPERTIES ENABLE_EXPORTS ON)
@@ -1331,8 +1274,8 @@
 
 option(BUILD_MAKEFONT "Compile the MakeFONT, too" TRUE)
 if(BUILD_MAKEFONT)
-    add_executable(MakeFONT${MP} MakeFONT/MakeFONT.cpp)
-    target_link_libraries(MakeFONT${MP} ${ENGINELIB})
+    add_executable(MakeFONT${MP} ${ENGINE_SRCS} MakeFONT/MakeFONT.cpp)
+    target_link_libraries(MakeFONT${MP} engine_safemath)
     add_dependencies(MakeFONT${MP} ParseEntities${MP})
     # Make symbols in the main executable available to dynamic objects
     set_target_properties(MakeFONT${MP} PROPERTIES ENABLE_EXPORTS ON)
@@ -1340,8 +1283,8 @@
 
 option(BUILD_TEXConv "Compile the TEXConv, too" TRUE)
 if(BUILD_TEXConv)
-    add_executable(TEXConv${MP} TEXConv/TEXConv.cpp)
-    target_link_libraries(TEXConv${MP} ${ENGINELIB})
+    add_executable(TEXConv${MP} ${ENGINE_SRCS} TEXConv/TEXConv.cpp)
+    target_link_libraries(TEXConv${MP} engine_safemath)
     add_dependencies(TEXConv${MP} ParseEntities${MP})
     # Make symbols in the main executable available to dynamic objects
     set_target_properties(TEXConv${MP} PROPERTIES ENABLE_EXPORTS ON)
@@ -1525,7 +1468,7 @@
 # NOT LOCAL INSTALL
 elseif(NOT LOCAL_INSTALL AND NOT XPLUS)
 if(DEBUG) # RAKE! Will this work with TFE?
-    install(TARGETS SeriousSam${MP} ${SHADERSLIB} ${GAMEMPLIB} ${ENTITIESMPLIB} ${ENGINELIB}
+    install(TARGETS SeriousSam${MP} ${SHADERSLIB} ${GAMEMPLIB} ${ENTITIESMPLIB}
             RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin"
             LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin/Debug"
             PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
@@ -1551,25 +1494,22 @@
     endif()
 else()
     install(TARGETS SeriousSam${MP} ${SHADERSLIB} ${GAMEMPLIB} ${ENTITIESMPLIB}
-            RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin"
+            RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/games"
             LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}/${INTERNAL_NAME}"
             PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
-    install(TARGETS ${ENGINELIB}
-            LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
-            PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     if(BUILD_DEDICATED_SERVER)
         install(TARGETS DedicatedServer${MP}
-                RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin"
+                RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/games"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
     if(BUILD_MAKEFONT)
         install(TARGETS MakeFONT${MP}
-                RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin"
+                RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/games"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
     if(BUILD_TEXConv)
         install(TARGETS TEXConv${MP}
-                RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin"
+                RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/games"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
     if(BUILD_AMP11LIB)
@@ -1587,11 +1527,12 @@
 # RAKE! If CMAKE_INSTALL_PREFIX was set during config then its not a local install
 # and SE1_10.gro needs to be installed to Games root dir.
 if(NOT LOCAL_INSTALL AND NOT XPLUS)
-    install(FILES ${CMAKE_ADD_TARGET_DIR}/../SE1_10b.gro
-            DESTINATION "${CMAKE_INSTALL_PREFIX}/share/${INTERNAL_NAME}"
+  if(INTERNAL_NAME STREQUAL "serioussam")
+    install(FILES "${CMAKE_ADD_TARGET_DIR}/../${INTERNAL_NAME}.desktop" RENAME "io.github.tx00100xt.serioussam.desktop"
+            DESTINATION "${CMAKE_INSTALL_PREFIX}/share/applications"
             PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
-    install(FILES "${CMAKE_ADD_TARGET_DIR}/../${INTERNAL_NAME}.desktop"
-            DESTINATION "${CMAKE_INSTALL_PREFIX}//share/applications"
+    install(FILES "${CMAKE_ADD_TARGET_DIR}/../../debian/io.github.tx00100xt.serioussam.appdata.xml"
+            DESTINATION "${CMAKE_INSTALL_PREFIX}/share/metainfo"
             PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
     set(A 16)
     set(B 32)
@@ -1605,9 +1546,14 @@
             OUTPUT_VARIABLE outVar
        )
        install(FILES ${CMAKE_ADD_TARGET_DIR}/../${X}.png
-               DESTINATION "${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/${X}x${X}/apps" RENAME "${INTERNAL_NAME}.png"
+               DESTINATION "${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/${X}x${X}/apps" RENAME "io.github.tx00100xt.${INTERNAL_NAME}.png"
                PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
 	endforeach()
+  else()
+    install(FILES "${CMAKE_ADD_TARGET_DIR}/../${INTERNAL_NAME}.desktop" RENAME "io.github.tx00100xt.serioussamse.desktop"
+            DESTINATION "${CMAKE_INSTALL_PREFIX}/share/applications"
+            PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
+  endif()
 endif()
 
 # end of CMakeLists.txt ...
