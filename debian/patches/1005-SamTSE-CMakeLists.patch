--- a/SamTSE/Sources/CMakeLists.txt	2023-06-08 23:16:29.099440916 +0300
+++ b/SamTSE/Sources/CMakeLists.txt	2023-06-08 13:15:33.317155000 +0300
@@ -63,17 +63,73 @@
     endif()
 endif()
 
+################################################################
+##### Serious Sam Classic The Second Encounter definitions #####
+#####                                                      #####
+################################################################
+
+set(INTERNAL_NAME "serioussamse")
+
+###############################################################
+###############################################################
+###############################################################
+
+# Define Target install dir
+string(FIND "${CMAKE_SOURCE_DIR}" "SamTFE/Sources" Found_SamTFE)
+MATH(EXPR Found_SamTFE "${Found_SamTFE}+1")
+string(FIND "${CMAKE_SOURCE_DIR}" "SamTSE/Sources" Found_SamTSE)
+MATH(EXPR Found_SamTSE "${Found_SamTSE}+1")
+MATH(EXPR Found_Sam "${Found_SamTFE}+${Found_SamTSE}")
+
+if("${Found_Sam}" EQUAL "0")
+  if(INTERNAL_NAME STREQUAL "serioussam")
+    set(CMAKE_ADD_TARGET_DIR "${CMAKE_SOURCE_DIR}/SamTFE/Sources")
+  else()
+    set(CMAKE_ADD_TARGET_DIR "${CMAKE_SOURCE_DIR}/SamTSE/Sources")
+  endif()
+    message(STATUS "Using CMakeLists.txt from main directory")
+else()
+    set(CMAKE_ADD_TARGET_DIR "${CMAKE_SOURCE_DIR}")
+    message(STATUS "Using CMakeLists.txt from subdirectory")
+endif()
+
+option(TFE "Compile a The First Encounter version" FALSE)
+
+if(INTERNAL_NAME STREQUAL "serioussam")
+ add_definitions(-DFIRST_ENCOUNTER=1)
+ set(MP "")
+ message(STATUS "Building Serious Sam Classic The First Encounter")
+else()
+ set(MP "MP")
+ message(STATUS "Building Serious Sam Classic The Second Encounter")
+endif()
+
+###############################################################
+###############################################################
+###############################################################
+
+
 # RAKE! Where to install the binaries.
 if(CMAKE_INSTALL_PREFIX STREQUAL "/usr/local" OR CMAKE_INSTALL_PREFIX STREQUAL "") # Only works for linux since I don't
                                                                                    # know what default is for windows/macos/freebsd.
-    set(CMAKE_INSTALL_PREFIX "${CMAKE_SOURCE_DIR}/../") # set install path to project root directory since
-                                                        # since one wasn't set during config
+    if("${Found_Sam}" EQUAL "0")
+        if(INTERNAL_NAME STREQUAL "serioussam")
+            set(CMAKE_INSTALL_PREFIX "${CMAKE_SOURCE_DIR}/SamTFE/Sources/../")     # set install path to project root directory since
+        else()                                                                     # since one wasn't set during config
+            set(CMAKE_INSTALL_PREFIX "${CMAKE_SOURCE_DIR}/SamTSE/Sources/../")     # set install path to project root directory since
+        endif()                                                                    # since one wasn't set during config
+    else()
+        set(CMAKE_INSTALL_PREFIX "${CMAKE_SOURCE_DIR}/../")                        # set install path to project root directory since
+    endif()                                                                        # since one wasn't set during config
     set(LOCAL_INSTALL TRUE)
+    message(STATUS "Using LOCAL Imstall")
 endif()
 if(CMAKE_INSTALL_PREFIX STREQUAL "/usr" ) # Only works for linux since I don't know what default is for windows/macos/freebsd.
     set(LOCAL_INSTALL FALSE)
+    message(STATUS "Using SYSTEM Install")
 endif()
 
+# ImageMagic needed for SYSTEM INSTALL
 if(NOT LOCAL_INSTALL)
 	find_package(ImageMagick COMPONENTS convert)
     if(ImageMagick_convert_FOUND)
@@ -83,13 +139,6 @@
     endif()
 endif()
 
-# Set internal name for not local installation
-if(TFE)
-    set(INTERNAL_NAME "serioussam")
-else()
-    set(INTERNAL_NAME "serioussamse")
-endif()
-
 # Set up some sanity stuff...
 if(CMAKE_SYSTEM_NAME STREQUAL "Linux" OR CMAKE_SYSTEM_NAME MATCHES "GNU|kFreeBSD")
     SET(LINUX TRUE)
@@ -113,7 +162,7 @@
 endif()
 
 if(NOT CMAKE_BUILD_TYPE)
-    set(CMAKE_BUILD_TYPE Debug CACHE STRING "None Debug Release RelWithDebInfo MinSizeRel" FORCE)
+    set(CMAKE_BUILD_TYPE Release CACHE STRING "None Debug Release RelWithDebInfo MinSizeRel" FORCE)
 endif()
 SET(DEBUG FALSE)
 if(CMAKE_BUILD_TYPE STREQUAL "Debug")
@@ -383,7 +432,7 @@
 	add_compile_options(/wd4714) # 'function' marked as __forceinline not inlined
 	add_compile_options(/wd4996) # 'function': was declared deprecated
 	add_compile_options(/wd4068) # unknown pragma
-        set(CMAKE_C_FLAGS_DEBUG "-D_DEBUG /Od /Zi /MDd")
+	set(CMAKE_C_FLAGS_DEBUG "-D_DEBUG /Od /Zi /MDd")
 	set(CMAKE_C_FLAGS_RELEASE "/Ox /Oy /MD")
 	set(CMAKE_C_FLAGS_RELWITHDEBINFO "/Ox /Oy /Zi /MD")
 	set(CMAKE_C_FLAGS_MINSIZEREL "/Ox /Oy /Os /MD")
@@ -446,24 +495,16 @@
     add_definitions(-DUSE_TREMOR=1)
 endif()
 
-option(TFE "Compile a The First Encounter version" FALSE)
-if (TFE)
- add_definitions(-DFIRST_ENCOUNTER=1)
- set(MP "")
-else()
- set(MP "MP")
-endif()
-
 option(XPLUS "Compile a XPLUS modification" FALSE)
 if(XPLUS)
     execute_process (
-        COMMAND bash -c "cp -fr ${CMAKE_SOURCE_DIR}/Entities${MP}/PlayerWeaponsHD.es ${CMAKE_SOURCE_DIR}/Entities${MP}/PlayerWeapons.es;"
+        COMMAND bash -c "cp -fr ${CMAKE_ADD_TARGET_DIR}/Entities${MP}/PlayerWeaponsHD.es ${CMAKE_ADD_TARGET_DIR}/Entities${MP}/PlayerWeapons.es;"
         OUTPUT_VARIABLE outVar
     )
     message(STATUS "Compile a XPLUS modification")
 else()
     execute_process (
-        COMMAND bash -c "cp -fr ${CMAKE_SOURCE_DIR}/Entities${MP}/PlayerWeapons_old.es ${CMAKE_SOURCE_DIR}/Entities${MP}/PlayerWeapons.es;"
+        COMMAND bash -c "cp -fr ${CMAKE_ADD_TARGET_DIR}/Entities${MP}/PlayerWeapons_old.es ${CMAKE_ADD_TARGET_DIR}/Entities${MP}/PlayerWeapons.es;"
         OUTPUT_VARIABLE outVar
     )
     message(STATUS "Compile a standard game")
@@ -522,17 +563,17 @@
 #  we're cross-compiling the rest of the game.
 if(NOT ECC)
     add_parser_and_scanner("Ecc/Parser" "Ecc/Scanner")
-    add_executable(ecc Ecc/Main.cpp Ecc/Parser.cpp Ecc/Parser.h Ecc/Scanner.cpp)
-    set(ECC "ecc")
+    add_executable(ecc-se Ecc/Main.cpp Ecc/Parser.cpp Ecc/Parser.h Ecc/Scanner.cpp)
+    set(ECC-SE "ecc-se")
 endif()
 
 macro(entity _NAME)
     add_custom_command(
         OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/${_NAME}.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/${_NAME}.h" "${CMAKE_CURRENT_SOURCE_DIR}/${_NAME}_tables.h"
         MAIN_DEPENDENCY "${CMAKE_CURRENT_SOURCE_DIR}/${_NAME}.es"
-        DEPENDS ${ECC}
+        DEPENDS ${ECC-SE}
         WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
-        COMMAND ${ECC}
+        COMMAND ${ECC-SE}
         ARGS "${_NAME}.es"
     )
     list(APPEND ENTITIES_CPP "${CMAKE_CURRENT_SOURCE_DIR}/${_NAME}.cpp")
@@ -550,7 +591,7 @@
 set(ENGINE_ENTITIES_CPP ${ENTITIES_CPP})
 
 set(ENTITIES_CPP "")
-if(TFE)
+if(INTERNAL_NAME STREQUAL "serioussam")
  entity(Entities/Acid)
  entity(Entities/AirWave)
  entity(Entities/AmmoItem)
@@ -816,10 +857,10 @@
  entity(EntitiesMP/WorldSettingsController)
 endif()
 
-add_custom_target(ParseEntities DEPENDS ${ENTITIES_H})
+add_custom_target(ParseEntities${MP} DEPENDS ${ENTITIES_H})
 
 set(ENTITIESMPLIB "Entities${MP}${DEBUGSUFFIX}")
-if(TFE)
+if(INTERNAL_NAME STREQUAL "serioussam")
  add_library(${ENTITIESMPLIB} SHARED
      ${ENTITIES_CPP}
      Entities/Common/Common.cpp
@@ -843,7 +884,7 @@
 if(MACOSX)
     target_link_libraries(${ENTITIESMPLIB} "-undefined dynamic_lookup")
 endif()
-add_dependencies(${ENTITIESMPLIB} ParseEntities)
+add_dependencies(${ENTITIESMPLIB} ParseEntities${MP})
 
 set(GAMEMPLIB "Game${MP}${DEBUGSUFFIX}")
 add_library(${GAMEMPLIB} SHARED
@@ -863,10 +904,10 @@
 if(MACOSX)
     target_link_libraries(${GAMEMPLIB} "-undefined dynamic_lookup")
 endif()
-add_dependencies(${GAMEMPLIB} ParseEntities)
+add_dependencies(${GAMEMPLIB} ParseEntities${MP})
 
 if(NOT XPLUS)
-set(SHADERSLIB "Shaders${DEBUGSUFFIX}")
+set(SHADERSLIB "Shaders${MP}${DEBUGSUFFIX}")
 add_library(${SHADERSLIB} SHARED
     Shaders/AddShader.cpp
     Shaders/AddShaderDS.cpp
@@ -892,7 +933,7 @@
 if(MACOSX)
     target_link_libraries(${SHADERSLIB} "-undefined dynamic_lookup")
 endif()
-add_dependencies(${SHADERSLIB} ParseEntities)
+add_dependencies(${SHADERSLIB} ParseEntities${MP})
 endif() # NOT XPLUS
 
 add_parser_and_scanner("Engine/Base/Parser" "Engine/Base/Scanner")
@@ -960,14 +1001,14 @@
     Engine/Math/Projection_Simple_DOUBLE.cpp
     Engine/Math/Geometry_DOUBLE.cpp
 )
-add_library(engine_safemath STATIC
+add_library(engine_safemath${MP} STATIC
     ${ENGINE_SAFEMATH_SRCS}
 )
-target_compile_options(engine_safemath PRIVATE "-fno-unsafe-math-optimizations")
+target_compile_options(engine_safemath${MP} PRIVATE "-fno-unsafe-math-optimizations")
 if(PANDORA)
-    target_compile_options(engine_safemath PRIVATE "-mfpu=vfpv3")
+    target_compile_options(engine_safemath${MP} PRIVATE "-mfpu=vfpv3")
 endif()
-add_dependencies(engine_safemath ParseEntities)
+add_dependencies(engine_safemath${MP} ParseEntities${MP})
 
 set(ENGINE_SRCS
     ${ENGINE_ENTITIES_CPP}
@@ -1144,8 +1185,8 @@
 if(MACOSX)
     target_link_libraries(${ENGINELIB} "-undefined dynamic_lookup")
 endif()
-add_dependencies(${ENGINELIB} ParseEntities)
-target_link_libraries(${ENGINELIB} engine_safemath)
+add_dependencies(${ENGINELIB} ParseEntities${MP})
+target_link_libraries(${ENGINELIB} engine_safemath${MP})
 if(FREEBSD)
 target_link_libraries(${ENGINELIB} ${SDL2_LIBRARY})
 target_link_libraries(${ENGINELIB} ${ZLIB_LIBRARIES})
@@ -1168,7 +1209,7 @@
 endif()
 set_target_properties(${ENGINELIB} PROPERTIES ENABLE_EXPORTS ON LINK_FLAGS "-Wl,-rpath,$ORIGIN")
 
-add_executable(SeriousSam
+add_executable(SeriousSam${MP}
     #${ENGINE_SRCS}
     SeriousSam/LevelInfo.cpp
     SeriousSam/CmdLine.cpp
@@ -1183,10 +1224,10 @@
     SeriousSam/MenuGadgets.cpp
     SeriousSam/MenuPrinting.cpp
 )
-target_link_libraries(SeriousSam ${ENGINELIB})
-add_dependencies(SeriousSam ParseEntities)
+target_link_libraries(SeriousSam${MP} ${ENGINELIB})
+add_dependencies(SeriousSam${MP} ParseEntities${MP})
 # Make symbols in the main executable available to dynamic objects
-set_target_properties(SeriousSam PROPERTIES ENABLE_EXPORTS ON)
+set_target_properties(SeriousSam${MP} PROPERTIES ENABLE_EXPORTS ON)
 
 
 # !!! FIXME: this is an option because you have to recompile the entire engine twice.
@@ -1194,20 +1235,20 @@
 # !!! FIXME:  that's a better plan and we can remove the toggle here.
 option(BUILD_DEDICATED_SERVER "Compile the dedicated server, too" TRUE)
 if(BUILD_DEDICATED_SERVER)
-    add_executable(DedicatedServer DedicatedServer/DedicatedServer.cpp)
-    target_link_libraries(DedicatedServer ${ENGINELIB})
-    add_dependencies(DedicatedServer ParseEntities)
+    add_executable(DedicatedServer${MP} DedicatedServer/DedicatedServer.cpp)
+    target_link_libraries(DedicatedServer${MP} ${ENGINELIB})
+    add_dependencies(DedicatedServer${MP} ParseEntities${MP})
     # Make symbols in the main executable available to dynamic objects
-    set_target_properties(DedicatedServer PROPERTIES ENABLE_EXPORTS ON)
+    set_target_properties(DedicatedServer${MP} PROPERTIES ENABLE_EXPORTS ON)
 endif()
 
 option(BUILD_MAKEFONT "Compile the MakeFONT, too" TRUE)
 if(BUILD_MAKEFONT)
-    add_executable(MakeFONT MakeFONT/MakeFONT.cpp)
-    target_link_libraries(MakeFONT ${ENGINELIB})
-    add_dependencies(MakeFONT ParseEntities)
+    add_executable(MakeFONT${MP} MakeFONT/MakeFONT.cpp)
+    target_link_libraries(MakeFONT${MP} ${ENGINELIB})
+    add_dependencies(MakeFONT${MP} ParseEntities${MP})
     # Make symbols in the main executable available to dynamic objects
-    set_target_properties(MakeFONT PROPERTIES ENABLE_EXPORTS ON)
+    set_target_properties(MakeFONT${MP} PROPERTIES ENABLE_EXPORTS ON)
 endif()
 
 option(BUILD_AMP11LIB "Compile the AMP11LIB, too" TRUE)
@@ -1235,121 +1276,125 @@
     amp11lib/ampdec.h
     amp11lib/ampsynth.cpp)
 
-add_library(amp11lib SHARED ${AMP11LIB_SOURCE_FILES})
+add_library(amp11lib${MP} SHARED ${AMP11LIB_SOURCE_FILES})
 endif()
 
 if(MACOSX)
-    target_link_libraries(SeriousSam ${ZLIB_LIBRARIES})
+    target_link_libraries(SeriousSam${MP} ${ZLIB_LIBRARIES})
     if(USE_SYSTEM_SDL2) # use sdl2 framework on system
-      target_link_libraries(SeriousSam ${SDL2_LIBRARY})
+      target_link_libraries(SeriousSam${MP} ${SDL2_LIBRARY})
     else() # use local libsdl2
 	  find_library(COCOA_FRAMEWORK Cocoa)
-      target_link_libraries(SeriousSam "${COCOA_FRAMEWORK}")
-      target_link_libraries(SeriousSam "${CMAKE_CURRENT_SOURCE_DIR}/lib/macosx/libSDL2-2.0.0.dylib")
+      target_link_libraries(SeriousSam${MP} "${COCOA_FRAMEWORK}")
+      target_link_libraries(SeriousSam${MP} "${CMAKE_CURRENT_SOURCE_DIR}/lib/macosx/libSDL2-2.0.0.dylib")
     endif()
     
     if(BUILD_DEDICATED_SERVER)
-		target_link_libraries(DedicatedServer ${ZLIB_LIBRARIES})
+		target_link_libraries(DedicatedServer${MP} ${ZLIB_LIBRARIES})
 		if(USE_SYSTEM_SDL2)
-			target_link_libraries(DedicatedServer ${SDL2_LIBRARY})
+			target_link_libraries(DedicatedServer${MP} ${SDL2_LIBRARY})
 		else()
-			target_link_libraries(DedicatedServer "${COCOA_FRAMEWORK}")
-			target_link_libraries(DedicatedServer "${CMAKE_CURRENT_SOURCE_DIR}/lib/macosx/libSDL2-2.0.0.dylib")
+			target_link_libraries(DedicatedServer${MP} "${COCOA_FRAMEWORK}")
+			target_link_libraries(DedicatedServer${MP} "${CMAKE_CURRENT_SOURCE_DIR}/lib/macosx/libSDL2-2.0.0.dylib")
 		endif()
     endif()
 endif()
 
 if(LINUX)
-    set_target_properties(SeriousSam PROPERTIES LINK_FLAGS "-Wl,-rpath,$ORIGIN")
-    target_link_libraries(SeriousSam "m")
-    target_link_libraries(SeriousSam "dl")
-    target_link_libraries(SeriousSam "pthread")
-    target_link_libraries(SeriousSam ${SDL2_LIBRARY})
-    target_link_libraries(SeriousSam ${ZLIB_LIBRARIES})
+    set_target_properties(SeriousSam${MP} PROPERTIES LINK_FLAGS "-Wl,-rpath,$ORIGIN")
+    target_link_libraries(SeriousSam${MP} "m")
+    target_link_libraries(SeriousSam${MP} "dl")
+    target_link_libraries(SeriousSam${MP} "pthread")
+    target_link_libraries(SeriousSam${MP} ${SDL2_LIBRARY})
+    target_link_libraries(SeriousSam${MP} ${ZLIB_LIBRARIES})
     if(BUILD_DEDICATED_SERVER)
-        set_target_properties(DedicatedServer PROPERTIES LINK_FLAGS "-Wl,-rpath,$ORIGIN")
-        target_link_libraries(DedicatedServer "m")
-        target_link_libraries(DedicatedServer "dl")
-        target_link_libraries(DedicatedServer "pthread")
-	    target_link_libraries(DedicatedServer ${SDL2_LIBRARY})
-        target_link_libraries(DedicatedServer ${ZLIB_LIBRARIES})
+        set_target_properties(DedicatedServer${MP} PROPERTIES LINK_FLAGS "-Wl,-rpath,$ORIGIN")
+        target_link_libraries(DedicatedServer${MP} "m")
+        target_link_libraries(DedicatedServer${MP} "dl")
+        target_link_libraries(DedicatedServer${MP} "pthread")
+	    target_link_libraries(DedicatedServer${MP} ${SDL2_LIBRARY})
+        target_link_libraries(DedicatedServer${MP} ${ZLIB_LIBRARIES})
     endif()
     if(BUILD_MAKEFONT)
-        set_target_properties(MakeFONT PROPERTIES LINK_FLAGS "-Wl,-rpath,$ORIGIN")
-        target_link_libraries(MakeFONT "m")
-        target_link_libraries(MakeFONT "dl")
-        target_link_libraries(MakeFONT "pthread")
-	    target_link_libraries(MakeFONT ${SDL2_LIBRARY})
-        target_link_libraries(MakeFONT ${ZLIB_LIBRARIES})
+        set_target_properties(MakeFONT${MP} PROPERTIES LINK_FLAGS "-Wl,-rpath,$ORIGIN")
+        target_link_libraries(MakeFONT${MP} "m")
+        target_link_libraries(MakeFONT${MP} "dl")
+        target_link_libraries(MakeFONT${MP} "pthread")
+	    target_link_libraries(MakeFONT${MP} ${SDL2_LIBRARY})
+        target_link_libraries(MakeFONT${MP} ${ZLIB_LIBRARIES})
     endif()
 endif()
 
 if(FREEBSD)
-    set_target_properties(SeriousSam PROPERTIES LINK_FLAGS "-Wl,-rpath,$ORIGIN")
-    target_link_libraries(SeriousSam "m")
-    target_link_libraries(SeriousSam "pthread")
-    target_link_libraries(SeriousSam ${SDL2_LIBRARY})
-    target_link_libraries(SeriousSam ${ZLIB_LIBRARIES})
+    set_target_properties(SeriousSam${MP} PROPERTIES LINK_FLAGS "-Wl,-rpath,$ORIGIN")
+    target_link_libraries(SeriousSam${MP} "m")
+    target_link_libraries(SeriousSam${MP} "pthread")
+    target_link_libraries(SeriousSam${MP} ${SDL2_LIBRARY})
+    target_link_libraries(SeriousSam${MP} ${ZLIB_LIBRARIES})
     if(BUILD_DEDICATED_SERVER)
-        set_target_properties(DedicatedServer PROPERTIES LINK_FLAGS "-Wl,-rpath,$ORIGIN")
-        target_link_libraries(DedicatedServer "m")
-        target_link_libraries(DedicatedServer "pthread")
-        target_link_libraries(DedicatedServer ${SDL2_LIBRARY})
-        target_link_libraries(DedicatedServer ${ZLIB_LIBRARIES})
+        set_target_properties(DedicatedServer${MP} PROPERTIES LINK_FLAGS "-Wl,-rpath,$ORIGIN")
+        target_link_libraries(DedicatedServer${MP} "m")
+        target_link_libraries(DedicatedServer${MP} "pthread")
+        target_link_libraries(DedicatedServer${MP} ${SDL2_LIBRARY})
+        target_link_libraries(DedicatedServer${MP} ${ZLIB_LIBRARIES})
     endif()
 endif()
 
 # Set output name for not local installation
 if(LOCAL_INSTALL)
- set_target_properties(SeriousSam PROPERTIES OUTPUT_NAME "SeriousSam")
- set_target_properties(DedicatedServer  PROPERTIES OUTPUT_NAME "DedicatedServer")
- set_target_properties(MakeFONT PROPERTIES OUTPUT_NAME "MakeFONT")
+ set_target_properties(SeriousSam${MP} PROPERTIES OUTPUT_NAME "SeriousSam")
+ set_target_properties(DedicatedServer${MP}  PROPERTIES OUTPUT_NAME "DedicatedServer")
+ set_target_properties(MakeFONT${MP} PROPERTIES OUTPUT_NAME "MakeFONT")
+ set_target_properties(amp11lib${MP} PROPERTIES OUTPUT_NAME "amp11lib${DEBUGSUFFIX}")
+ set_target_properties(${SHADERSLIBSE} PROPERTIES OUTPUT_NAME "Shaders${DEBUGSUFFIX}")
 else()
- set_target_properties(SeriousSam PROPERTIES OUTPUT_NAME "${INTERNAL_NAME}")
- set_target_properties(DedicatedServer  PROPERTIES OUTPUT_NAME "${INTERNAL_NAME}-ded")
- set_target_properties(MakeFONT PROPERTIES OUTPUT_NAME "${INTERNAL_NAME}-mkfont")
+ set_target_properties(SeriousSam${MP} PROPERTIES OUTPUT_NAME "${INTERNAL_NAME}")
+ set_target_properties(DedicatedServer${MP}  PROPERTIES OUTPUT_NAME "${INTERNAL_NAME}-ded")
+ set_target_properties(MakeFONT${MP} PROPERTIES OUTPUT_NAME "${INTERNAL_NAME}-mkfont")
+ set_target_properties(amp11lib${MP} PROPERTIES OUTPUT_NAME "amp11lib")
+ set_target_properties(${SHADERSLIB} PROPERTIES OUTPUT_NAME "Shaders")
 endif()
 endif() # NOT XPLUS
 
 # RAKE! Install Section.
 if(LOCAL_INSTALL AND NOT XPLUS)
 if(DEBUG) # RAKE! Will this work with TFE?
-    install(TARGETS SeriousSam ${SHADERSLIB} ${GAMEMPLIB} ${ENTITIESMPLIB} ${ENGINELIB}
+    install(TARGETS SeriousSam${MP} ${SHADERSLIB} ${GAMEMPLIB} ${ENTITIESMPLIB} ${ENGINELIB}
             RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin"
             LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin/Debug"
             PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     if(BUILD_DEDICATED_SERVER)
-        install(TARGETS DedicatedServer
+        install(TARGETS DedicatedServer${MP}
                 RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
     if(BUILD_MAKEFONT)
-        install(TARGETS MakeFONT
+        install(TARGETS MakeFONT${MP}
                 RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
     if(BUILD_AMP11LIB)
-        install(TARGETS amp11lib
+        install(TARGETS amp11lib${MP}
                 LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin/Debug"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
 else()
-    install(TARGETS SeriousSam ${SHADERSLIB} ${GAMEMPLIB} ${ENTITIESMPLIB} ${ENGINELIB}
+    install(TARGETS SeriousSam${MP} ${SHADERSLIB} ${GAMEMPLIB} ${ENTITIESMPLIB} ${ENGINELIB}
             RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin"
             LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin"
             PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     if(BUILD_DEDICATED_SERVER)
-        install(TARGETS DedicatedServer
+        install(TARGETS DedicatedServer${MP}
                 RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
     if(BUILD_MAKEFONT)
-        install(TARGETS MakeFONT
+        install(TARGETS MakeFONT${MP}
                 RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
     if(BUILD_AMP11LIB)
-        install(TARGETS amp11lib
+        install(TARGETS amp11lib${MP}
                 LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
@@ -1361,27 +1406,27 @@
 # NOT LOCAL INSTALL
 elseif(NOT LOCAL_INSTALL AND NOT XPLUS)
 if(DEBUG) # RAKE! Will this work with TFE?
-    install(TARGETS SeriousSam ${SHADERSLIB} ${GAMEMPLIB} ${ENTITIESMPLIB} ${ENGINELIB}
+    install(TARGETS SeriousSam${MP} ${SHADERSLIB} ${GAMEMPLIB} ${ENTITIESMPLIB} ${ENGINELIB}
             RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin"
             LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin/Debug"
             PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     if(BUILD_DEDICATED_SERVER)
-        install(TARGETS DedicatedServer
+        install(TARGETS DedicatedServer${MP}
                 RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
     if(BUILD_MAKEFONT)
-        install(TARGETS MakeFONT
+        install(TARGETS MakeFONT${MP}
                 RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
     if(BUILD_AMP11LIB)
-        install(TARGETS amp11lib
+        install(TARGETS amp11lib${MP}
                 LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/Bin/Debug"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
 else()
-    install(TARGETS SeriousSam ${SHADERSLIB} ${GAMEMPLIB} ${ENTITIESMPLIB}
+    install(TARGETS SeriousSam${MP} ${SHADERSLIB} ${GAMEMPLIB} ${ENTITIESMPLIB}
             RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin"
             LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}/${INTERNAL_NAME}"
             PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
@@ -1389,17 +1434,17 @@
             LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
             PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     if(BUILD_DEDICATED_SERVER)
-        install(TARGETS DedicatedServer
+        install(TARGETS DedicatedServer${MP}
                 RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
     if(BUILD_MAKEFONT)
-        install(TARGETS MakeFONT
+        install(TARGETS MakeFONT${MP}
                 RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
     if(BUILD_AMP11LIB)
-        install(TARGETS amp11lib
+        install(TARGETS amp11lib${MP}
                 LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}/${INTERNAL_NAME}"
                 PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
     endif()
@@ -1413,10 +1458,10 @@
 # RAKE! If CMAKE_INSTALL_PREFIX was set during config then its not a local install
 # and SE1_10.gro needs to be installed to Games root dir.
 if(NOT LOCAL_INSTALL AND NOT XPLUS)
-    install(FILES ${CMAKE_SOURCE_DIR}/../SE1_10b.gro
+    install(FILES ${CMAKE_ADD_TARGET_DIR}/../SE1_10b.gro
             DESTINATION "${CMAKE_INSTALL_PREFIX}/share/${INTERNAL_NAME}"
             PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
-    install(FILES "${CMAKE_SOURCE_DIR}/../${INTERNAL_NAME}.desktop"
+    install(FILES "${CMAKE_ADD_TARGET_DIR}/../${INTERNAL_NAME}.desktop"
             DESTINATION "${CMAKE_INSTALL_PREFIX}//share/applications"
             PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
     set(A 16)
@@ -1427,10 +1472,10 @@
     foreach(X IN LISTS A B C D E)
         #message(STATUS "Create icon ${X}x${X}")
         execute_process (
-            COMMAND bash -c "${ImageMagick_convert_EXECUTABLE} ${CMAKE_SOURCE_DIR}/../${INTERNAL_NAME}.png -scale ${X}x${X} ${CMAKE_SOURCE_DIR}/../${X}.png;"
+            COMMAND bash -c "${ImageMagick_convert_EXECUTABLE} ${CMAKE_ADD_TARGET_DIR}/../${INTERNAL_NAME}.png -scale ${X}x${X} ${CMAKE_ADD_TARGET_DIR}/../${X}.png;"
             OUTPUT_VARIABLE outVar
        )
-       install(FILES ${CMAKE_SOURCE_DIR}/../${X}.png
+       install(FILES ${CMAKE_ADD_TARGET_DIR}/../${X}.png
                DESTINATION "${CMAKE_INSTALL_PREFIX}/share/icons/hicolor/${X}x${X}/apps" RENAME "${INTERNAL_NAME}.png"
                PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)
 	endforeach()
