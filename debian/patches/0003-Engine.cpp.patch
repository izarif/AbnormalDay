Description: Set Debian specific paths: https://wiki.debian.org/Games/Checklist
Forwarded: not-needed
--- a/SamTFE/Sources/Engine/Engine.cpp	2023-11-28 16:51:55.989955484 +0300
+++ b/SamTFE/Sources/Engine/Engine.cpp	2024-01-25 12:59:40.376276525 +0300
@@ -676,10 +676,19 @@
   _fnmApplicationPath = CTString(strDirPath);
   _fnmApplicationExe = CTString(strExePath);
 #ifdef PLATFORM_UNIX
-    // rcg01012002 calculate user dir.
+  _fnmAdditionalDirPath = "/usr/share/games/" + strGameID + "/";
+  // rcg01012002 calculate user dir.
   char buf[MAX_PATH];
-  _pFileSystem->GetUserDirectory(buf, sizeof (buf));
-  _fnmUserDir = CTString(buf);
+  //_pFileSystem->GetUserDirectory(buf, sizeof (buf));
+  struct passwd *pw = getpwuid(getuid());
+  struct stat st = {0};
+  const char *_homedir = pw->pw_dir;
+  strcpy(buf, _homedir);
+  buf[strlen(_homedir)] = 0x00;
+  _fnmUserDir = CTString(buf) + "/." + strGameID + "/";
+  if (stat((const char *) _fnmUserDir, &st) == -1) {
+    mkdir((const char *) _fnmUserDir, 0755);
+  }
 #endif
   try {
     _fnmApplicationExe.RemoveApplicationPath_t();
@@ -747,13 +748,10 @@
 #elif defined(__NetBSD__)
   int _isystempath = strncmp((const char *)strExePath, (const char *) "/usr/pkg/bin/", (size_t) 13 );
 #else
-  int _isystempath = strncmp((const char *)strExePath, (const char *) "/usr/bin/", (size_t) 9 );
+  int _isystempath = strncmp((const char *)strExePath, (const char *) "/usr/games/", (size_t) 11 );
 #endif
-  if( _isystempath == 0 ) {
-       sys_iSysPath = 1; // using system path
-  } else {
-       sys_iSysPath = 0; // using standarted path
-  }
+
+  sys_iSysPath = 1; // using system path
 
   // get library path for mods
   _fnmModLibPath = "";
@@ -764,24 +762,7 @@
   if( sys_iSysPath == 1 ) {
     _fnmModLibPath = "/usr/pkg/lib/" + strGameID + "/";
 #else
-  if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/aarch64-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/aarch64-linux-gnu/" + strGameID + "/"; 
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 32 && _pFileSystem->IsDirectory((const char *) "/usr/lib/arm-linux-gnueabihf/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/arm-linux-gnueabihf/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/riscv64-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/riscv64-linux-gnu/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/s390x-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/s390x-linux-gnu/" + strGameID + "/"; 
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/powerpc64-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/powerpc64-linux-gnu/" + strGameID + "/"; 
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/x86_64-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/x86_64-linux-gnu/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 32 && _pFileSystem->IsDirectory((const char *) "/usr/lib/i386-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/i386-linux-gnu/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib64/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib64/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 32 && _pFileSystem->IsDirectory((const char *) "/usr/lib//" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/" + strGameID + "/";
+  if( sys_iSysPath == 1 ) {  _fnmModLibPath = "/usr/lib/games/" + strGameID + "/";
 #endif
   } else if( sys_iSysPath == 0 ) {
     _fnmModLibPath = _fnmApplicationPath;
@@ -806,7 +806,7 @@
 #elif defined(__NetBSD__)
     _fnm_usr_TestFile = "/usr/pkg/share/" + strGameID + "/" + _fnm_TestFile; //  data in usr
 #else
-    _fnm_usr_TestFile = "/usr/share/" + strGameID + "/" + _fnm_TestFile; //  data in usr
+    _fnm_usr_TestFile = "/usr/share/games/" + strGameID + "/" + _fnm_TestFile; //  data in usr
 #endif
     _fnm_local_TestFile = _fnmUserDir + _fnm_TestFile;                   //  data in home .local
     _fnm_home_TestFile = (const char *)_fnmUserDataPath  + _fnm_TestFile;
@@ -831,7 +812,7 @@
 #elif defined(__NetBSD__)
         _fnmApplicationPath = "/usr/pkg/share/" + strGameID + "/";                       // all game data
 #else
-        _fnmApplicationPath = "/usr/share/" + strGameID + "/";                       // all game data
+        _fnmApplicationPath = "/usr/share/games/" + strGameID + "/";                       // all game data
 #endif
         CPrintF(TRANSV("Found usr path: %s\n"), (const char *) _fnmUserDataPath);
       } else if( access((const char *) _fnm_local_TestFile, F_OK) == 0 ) {
@@ -845,7 +826,7 @@
 #elif defined(__NetBSD__)
         InfoMessage(TRANS("No game files were found in /usr/pkg/share/%s/\n or %s\nThe home directory will be searched."),(const char *) strGameID,(const char *) _fnmUserDir);
 #else
-        InfoMessage(TRANS("No game files were found in /usr/share/%s/\n or %s\nThe home directory will be searched."),(const char *) strGameID,(const char *) _fnmUserDir);
+        InfoMessage(TRANS("No game files were found in /usr/share/games/%s/\n or %s\nThe home directory will be searched."),(const char *) strGameID,(const char *) _fnmUserDir);
 #endif
         struct passwd *pw = getpwuid(getuid());
         const char *_homedir = pw->pw_dir;
@@ -869,7 +850,7 @@
 #elif defined(__NetBSD__)
           FatalError(TRANSV("Failed to search game data!\nPlease put the game data in the paths:\n/usr/pkg/share/%s/\n or %s\n or somewhere in your home directory\nSee the log for more details.\nGame log is here: ~/.local/share/Serious-Engine/%s/SeriousSam.log"),(const char *) strGameID,(const char *) _fnmUserDir,(const char *) strGameID);
 #else
-          FatalError(TRANSV("Failed to search game data!\nPlease put the game data in the paths:\n/usr/share/%s/\n or %s\n or somewhere in your home directory\nSee the log for more details.\nGame log is here: ~/.local/share/Serious-Engine/%s/SeriousSam.log"),(const char *) strGameID,(const char *) _fnmUserDir,(const char *) strGameID);
+          FatalError(TRANSV("Failed to search game data!\nPlease put the game data in the paths:\n/usr/share/games/%s/\n or %s\n or somewhere in your home directory\nSee the log for more details.\nGame log is here: ~/.%s/SeriousSam.log"),(const char *) strGameID,(const char *) _fnmUserDir,(const char *) strGameID);
 #endif
         }
       } 
@@ -883,6 +864,7 @@
   CPrintF(TRANSV("Executable: %s\n"), (const char *) strExePath);
   CPrintF(TRANSV("Assumed engine data directory: %s\n"), (const char *) _fnmApplicationPath);
   CPrintF(TRANSV("Assumed mods library directory: %s\n"), (const char *) _fnmModLibPath);
+  CPrintF(TRANSV("Assumed additional data directory: %s\n"), (const char *) _fnmAdditionalDirPath);
 #endif
 
   CPrintF("\n");
--- a/SamTSE/Sources/Engine/Engine.cpp	2023-11-28 16:51:55.989955484 +0300
+++ b/SamTSE/Sources/Engine/Engine.cpp	2024-01-25 12:59:40.376276525 +0300
@@ -676,10 +676,19 @@
   _fnmApplicationPath = CTString(strDirPath);
   _fnmApplicationExe = CTString(strExePath);
 #ifdef PLATFORM_UNIX
-    // rcg01012002 calculate user dir.
+  _fnmAdditionalDirPath = "/usr/share/games/" + strGameID + "/";
+  // rcg01012002 calculate user dir.
   char buf[MAX_PATH];
-  _pFileSystem->GetUserDirectory(buf, sizeof (buf));
-  _fnmUserDir = CTString(buf);
+  //_pFileSystem->GetUserDirectory(buf, sizeof (buf));
+  struct passwd *pw = getpwuid(getuid());
+  struct stat st = {0};
+  const char *_homedir = pw->pw_dir;
+  strcpy(buf, _homedir);
+  buf[strlen(_homedir)] = 0x00;
+  _fnmUserDir = CTString(buf) + "/." + strGameID + "/";
+  if (stat((const char *) _fnmUserDir, &st) == -1) {
+    mkdir((const char *) _fnmUserDir, 0755);
+  }
 #endif
   try {
     _fnmApplicationExe.RemoveApplicationPath_t();
@@ -747,13 +748,10 @@
 #elif defined(__NetBSD__)
   int _isystempath = strncmp((const char *)strExePath, (const char *) "/usr/pkg/bin/", (size_t) 13 );
 #else
-  int _isystempath = strncmp((const char *)strExePath, (const char *) "/usr/bin/", (size_t) 9 );
+  int _isystempath = strncmp((const char *)strExePath, (const char *) "/usr/games/", (size_t) 11 );
 #endif
-  if( _isystempath == 0 ) {
-       sys_iSysPath = 1; // using system path
-  } else {
-       sys_iSysPath = 0; // using standarted path
-  }
+
+  sys_iSysPath = 1; // using system path
 
   // get library path for mods
   _fnmModLibPath = "";
@@ -764,24 +762,7 @@
   if( sys_iSysPath == 1 ) {
     _fnmModLibPath = "/usr/pkg/lib/" + strGameID + "/";
 #else
-  if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/aarch64-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/aarch64-linux-gnu/" + strGameID + "/"; 
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 32 && _pFileSystem->IsDirectory((const char *) "/usr/lib/arm-linux-gnueabihf/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/arm-linux-gnueabihf/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/riscv64-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/riscv64-linux-gnu/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/s390x-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/s390x-linux-gnu/" + strGameID + "/"; 
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/powerpc64-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/powerpc64-linux-gnu/" + strGameID + "/"; 
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/x86_64-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/x86_64-linux-gnu/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 32 && _pFileSystem->IsDirectory((const char *) "/usr/lib/i386-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/i386-linux-gnu/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib64/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib64/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 32 && _pFileSystem->IsDirectory((const char *) "/usr/lib//" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/" + strGameID + "/";
+  if( sys_iSysPath == 1 ) {  _fnmModLibPath = "/usr/lib/games/" + strGameID + "/";
 #endif
   } else if( sys_iSysPath == 0 ) {
     _fnmModLibPath = _fnmApplicationPath;
@@ -806,7 +806,7 @@
 #elif defined(__NetBSD__)
     _fnm_usr_TestFile = "/usr/pkg/share/" + strGameID + "/" + _fnm_TestFile; //  data in usr
 #else
-    _fnm_usr_TestFile = "/usr/share/" + strGameID + "/" + _fnm_TestFile; //  data in usr
+    _fnm_usr_TestFile = "/usr/share/games/" + strGameID + "/" + _fnm_TestFile; //  data in usr
 #endif
     _fnm_local_TestFile = _fnmUserDir + _fnm_TestFile;                   //  data in home .local
     _fnm_home_TestFile = (const char *)_fnmUserDataPath  + _fnm_TestFile;
@@ -831,7 +812,7 @@
 #elif defined(__NetBSD__)
         _fnmApplicationPath = "/usr/pkg/share/" + strGameID + "/";                       // all game data
 #else
-        _fnmApplicationPath = "/usr/share/" + strGameID + "/";                       // all game data
+        _fnmApplicationPath = "/usr/share/games/" + strGameID + "/";                       // all game data
 #endif
         CPrintF(TRANSV("Found usr path: %s\n"), (const char *) _fnmUserDataPath);
       } else if( access((const char *) _fnm_local_TestFile, F_OK) == 0 ) {
@@ -845,7 +826,7 @@
 #elif defined(__NetBSD__)
         InfoMessage(TRANS("No game files were found in /usr/pkg/share/%s/\n or %s\nThe home directory will be searched."),(const char *) strGameID,(const char *) _fnmUserDir);
 #else
-        InfoMessage(TRANS("No game files were found in /usr/share/%s/\n or %s\nThe home directory will be searched."),(const char *) strGameID,(const char *) _fnmUserDir);
+        InfoMessage(TRANS("No game files were found in /usr/share/games/%s/\n or %s\nThe home directory will be searched."),(const char *) strGameID,(const char *) _fnmUserDir);
 #endif
         struct passwd *pw = getpwuid(getuid());
         const char *_homedir = pw->pw_dir;
@@ -869,7 +850,7 @@
 #elif defined(__NetBSD__)
           FatalError(TRANSV("Failed to search game data!\nPlease put the game data in the paths:\n/usr/pkg/share/%s/\n or %s\n or somewhere in your home directory\nSee the log for more details.\nGame log is here: ~/.local/share/Serious-Engine/%s/SeriousSam.log"),(const char *) strGameID,(const char *) _fnmUserDir,(const char *) strGameID);
 #else
-          FatalError(TRANSV("Failed to search game data!\nPlease put the game data in the paths:\n/usr/share/%s/\n or %s\n or somewhere in your home directory\nSee the log for more details.\nGame log is here: ~/.local/share/Serious-Engine/%s/SeriousSam.log"),(const char *) strGameID,(const char *) _fnmUserDir,(const char *) strGameID);
+          FatalError(TRANSV("Failed to search game data!\nPlease put the game data in the paths:\n/usr/share/games/%s/\n or %s\n or somewhere in your home directory\nSee the log for more details.\nGame log is here: ~/.%s/SeriousSam.log"),(const char *) strGameID,(const char *) _fnmUserDir,(const char *) strGameID);
 #endif
         }
       } 
@@ -883,6 +864,7 @@
   CPrintF(TRANSV("Executable: %s\n"), (const char *) strExePath);
   CPrintF(TRANSV("Assumed engine data directory: %s\n"), (const char *) _fnmApplicationPath);
   CPrintF(TRANSV("Assumed mods library directory: %s\n"), (const char *) _fnmModLibPath);
+  CPrintF(TRANSV("Assumed additional data directory: %s\n"), (const char *) _fnmAdditionalDirPath);
 #endif
 
   CPrintF("\n");
