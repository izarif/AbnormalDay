--- a/SamTFE/Sources/Engine/Engine.cpp	2024-02-13 13:19:08.215747324 +0300
+++ b/SamTFE/Sources/Engine/Engine.cpp	2024-02-13 13:06:48.202436314 +0300
@@ -115,6 +115,7 @@
 // Path vars
 static INDEX sys_iGameBits = 0;
 ENGINE_API INDEX sys_iSysPath = 0;
+ENGINE_API INDEX sys_iGameDataNotFound = 0;
 
 // Entities Adjesters
 ENGINE_API FLOAT _fPlayerFOVAdjuster = 1.0f;
@@ -676,6 +676,8 @@
   _fnmApplicationPath = CTString(strDirPath);
   _fnmApplicationExe = CTString(strExePath);
 #ifdef PLATFORM_UNIX
+  _fnmAdditionalDirPath = CTString(strDirPath) + "share/" + strGameID + "/";
+  //_fnmAdditionalDirPath = "/usr/share/" + strGameID + "/";
     // rcg01012002 calculate user dir.
   char buf[MAX_PATH];
   _pFileSystem->GetUserDirectory(buf, sizeof (buf));
@@ -742,53 +742,11 @@
   CPrintF(TRANSV("Running %d-bit version\n"), sys_iGameBits);
 
 #ifdef PLATFORM_UNIX
-#if defined(__OpenBSD__) || defined(__FreeBSD__)
-  int _isystempath = strncmp((const char *)strExePath, (const char *) "/usr/local/bin/", (size_t) 15 );
-#elif defined(__NetBSD__)
-  int _isystempath = strncmp((const char *)strExePath, (const char *) "/usr/pkg/bin/", (size_t) 13 );
-#else
-  int _isystempath = strncmp((const char *)strExePath, (const char *) "/usr/bin/", (size_t) 9 );
-#endif
-  if( _isystempath == 0 ) {
-       sys_iSysPath = 1; // using system path
-  } else {
-       sys_iSysPath = 0; // using standarted path
-  }
 
-  // get library path for mods
-  _fnmModLibPath = "";
-#if defined(__OpenBSD__) || defined(__FreeBSD__)
-  if( sys_iSysPath == 1 ) {
-    _fnmModLibPath = "/usr/local/lib/" + strGameID + "/";
-#elif defined(__NetBSD__)
-  if( sys_iSysPath == 1 ) {
-    _fnmModLibPath = "/usr/pkg/lib/" + strGameID + "/";
-#else
-  if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/aarch64-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/aarch64-linux-gnu/" + strGameID + "/"; 
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 32 && _pFileSystem->IsDirectory((const char *) "/usr/lib/arm-linux-gnueabihf/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/arm-linux-gnueabihf/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/riscv64-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/riscv64-linux-gnu/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/s390x-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/s390x-linux-gnu/" + strGameID + "/"; 
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/powerpc64-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/powerpc64-linux-gnu/" + strGameID + "/"; 
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/x86_64-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/x86_64-linux-gnu/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 32 && _pFileSystem->IsDirectory((const char *) "/usr/lib/i386-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/i386-linux-gnu/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib64/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib64/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 32 && _pFileSystem->IsDirectory((const char *) "/usr/lib//" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/" + strGameID + "/";
-#endif
-  } else if( sys_iSysPath == 0 ) {
-    _fnmModLibPath = _fnmApplicationPath;
-  } else {
-    CPrintF(TRANSV("ERROR: Game libraries not ound!\n"));
-    FatalError(TRANSV("Failed to search game libraries installed!\nPlease reinstall the game.\nSee the log for more details.\nGame log is here: ~/.local/share/Serious-Engine/%s/SeriousSam.log"),(const char *) strGameID);
-  }
+  // using system path
+  sys_iSysPath = 1;
+  // library path for mods
+  _fnmModLibPath = _fnmApplicationPath + "lib/" + strGameID + "/";
 
   if( sys_iSysPath == 1 ) { // search game data
     CTFileName _fnm_usr_TestFile, _fnm_local_TestFile, _fnm_home_TestFile;
@@ -805,7 +805,7 @@
 #elif defined(__NetBSD__)
         InfoMessage(TRANS("No game files were found in /usr/pkg/share/%s/\n or %s\nThe home directory will be searched."),(const char *) strGameID,(const char *) _fnmUserDir);
 #else
-        InfoMessage(TRANS("No game files were found in /usr/share/%s/\n or %s\nThe home directory will be searched."),(const char *) strGameID,(const char *) _fnmUserDir);
+        //InfoMessage(TRANS("No game files were found in /usr/share/%s/\n or %s\nThe home directory will be searched."),(const char *) strGameID,(const char *) _fnmUserDir);
 #endif
         struct passwd *pw = getpwuid(getuid());
         const char *_homedir = pw->pw_dir;
@@ -823,13 +824,14 @@
           close(_fd);
         } else {
           CPrintF(TRANSV("ERROR: Game data not ound!\n"));
-          _fnmUserDataPath = "";
+          _fnmApplicationPath = _fnmAdditionalDirPath;
+          sys_iGameDataNotFound = 1;
 #if defined(__OpenBSD__) || defined(__FreeBSD__)
           FatalError(TRANSV("Failed to search game data!\nPlease put the game data in the paths:\n/usr/local/share/%s/\n or %s\n or somewhere in your home directory\nSee the log for more details.\nGame log is here: ~/.local/share/Serious-Engine/%s/SeriousSam.log"),(const char *) strGameID,(const char *) _fnmUserDir,(const char *) strGameID);
 #elif defined(__NetBSD__)
           FatalError(TRANSV("Failed to search game data!\nPlease put the game data in the paths:\n/usr/pkg/share/%s/\n or %s\n or somewhere in your home directory\nSee the log for more details.\nGame log is here: ~/.local/share/Serious-Engine/%s/SeriousSam.log"),(const char *) strGameID,(const char *) _fnmUserDir,(const char *) strGameID);
 #else
-          FatalError(TRANSV("Failed to search game data!\nPlease put the game data in the paths:\n/usr/share/%s/\n or %s\n or somewhere in your home directory\nSee the log for more details.\nGame log is here: ~/.local/share/Serious-Engine/%s/SeriousSam.log"),(const char *) strGameID,(const char *) _fnmUserDir,(const char *) strGameID);
+          //FatalError(TRANSV("Failed to search game data!\nPlease put the game data in the paths:\n/usr/share/%s/\n or %s\n or somewhere in your home directory\nSee the log for more details.\nGame log is here: ~/.local/share/Serious-Engine/%s/SeriousSam.log"),(const char *) strGameID,(const char *) _fnmUserDir,(const char *) strGameID);
 #endif
         }
       } 
@@ -883,6 +885,7 @@
   CPrintF(TRANSV("Executable: %s\n"), (const char *) strExePath);
   CPrintF(TRANSV("Assumed engine data directory: %s\n"), (const char *) _fnmApplicationPath);
   CPrintF(TRANSV("Assumed mods library directory: %s\n"), (const char *) _fnmModLibPath);
+  CPrintF(TRANSV("Assumed additional data directory: %s\n"), (const char *) _fnmAdditionalDirPath);
 #endif
 
   CPrintF("\n");
--- a/SamTSE/Sources/Engine/Engine.cpp	2024-02-13 13:19:08.215747324 +0300
+++ b/SamTSE/Sources/Engine/Engine.cpp	2024-02-13 13:06:48.202436314 +0300
@@ -110,11 +110,12 @@
 
 // MOD info
 static CTString sys_strModName = "";
-static CTString sys_strModExt  = "";
+static CTString sys_strModExt  = "MP";
 
 // Path vars
 static INDEX sys_iGameBits = 0;
 ENGINE_API INDEX sys_iSysPath = 0;
+ENGINE_API INDEX sys_iGameDataNotFound = 0;
 
 // Entities Adjesters
 ENGINE_API FLOAT _fPlayerFOVAdjuster = 1.0f;
@@ -676,6 +676,8 @@
   _fnmApplicationPath = CTString(strDirPath);
   _fnmApplicationExe = CTString(strExePath);
 #ifdef PLATFORM_UNIX
+  _fnmAdditionalDirPath = CTString(strDirPath) + "share/" + strGameID + "/";
+  //_fnmAdditionalDirPath = "/usr/share/" + strGameID + "/";
     // rcg01012002 calculate user dir.
   char buf[MAX_PATH];
   _pFileSystem->GetUserDirectory(buf, sizeof (buf));
@@ -742,53 +742,11 @@
   CPrintF(TRANSV("Running %d-bit version\n"), sys_iGameBits);
 
 #ifdef PLATFORM_UNIX
-#if defined(__OpenBSD__) || defined(__FreeBSD__)
-  int _isystempath = strncmp((const char *)strExePath, (const char *) "/usr/local/bin/", (size_t) 15 );
-#elif defined(__NetBSD__)
-  int _isystempath = strncmp((const char *)strExePath, (const char *) "/usr/pkg/bin/", (size_t) 13 );
-#else
-  int _isystempath = strncmp((const char *)strExePath, (const char *) "/usr/bin/", (size_t) 9 );
-#endif
-  if( _isystempath == 0 ) {
-       sys_iSysPath = 1; // using system path
-  } else {
-       sys_iSysPath = 0; // using standarted path
-  }
 
-  // get library path for mods
-  _fnmModLibPath = "";
-#if defined(__OpenBSD__) || defined(__FreeBSD__)
-  if( sys_iSysPath == 1 ) {
-    _fnmModLibPath = "/usr/local/lib/" + strGameID + "/";
-#elif defined(__NetBSD__)
-  if( sys_iSysPath == 1 ) {
-    _fnmModLibPath = "/usr/pkg/lib/" + strGameID + "/";
-#else
-  if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/aarch64-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/aarch64-linux-gnu/" + strGameID + "/"; 
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 32 && _pFileSystem->IsDirectory((const char *) "/usr/lib/arm-linux-gnueabihf/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/arm-linux-gnueabihf/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/riscv64-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/riscv64-linux-gnu/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/s390x-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/s390x-linux-gnu/" + strGameID + "/"; 
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/powerpc64-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/powerpc64-linux-gnu/" + strGameID + "/"; 
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib/x86_64-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/x86_64-linux-gnu/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 32 && _pFileSystem->IsDirectory((const char *) "/usr/lib/i386-linux-gnu/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/i386-linux-gnu/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 64 && _pFileSystem->IsDirectory((const char *) "/usr/lib64/" + strGameID)) {
-    _fnmModLibPath = "/usr/lib64/" + strGameID + "/";
-  } else if( sys_iSysPath == 1 && sys_iGameBits == 32 && _pFileSystem->IsDirectory((const char *) "/usr/lib//" + strGameID)) {
-    _fnmModLibPath = "/usr/lib/" + strGameID + "/";
-#endif
-  } else if( sys_iSysPath == 0 ) {
-    _fnmModLibPath = _fnmApplicationPath;
-  } else {
-    CPrintF(TRANSV("ERROR: Game libraries not ound!\n"));
-    FatalError(TRANSV("Failed to search game libraries installed!\nPlease reinstall the game.\nSee the log for more details.\nGame log is here: ~/.local/share/Serious-Engine/%s/SeriousSam.log"),(const char *) strGameID);
-  }
+  // using system path
+  sys_iSysPath = 1;
+  // library path for mods
+  _fnmModLibPath = _fnmApplicationPath + "lib/" + strGameID + "/";
 
   if( sys_iSysPath == 1 ) { // search game data
     CTFileName _fnm_usr_TestFile, _fnm_local_TestFile, _fnm_home_TestFile;
@@ -805,7 +805,7 @@
 #elif defined(__NetBSD__)
         InfoMessage(TRANS("No game files were found in /usr/pkg/share/%s/\n or %s\nThe home directory will be searched."),(const char *) strGameID,(const char *) _fnmUserDir);
 #else
-        InfoMessage(TRANS("No game files were found in /usr/share/%s/\n or %s\nThe home directory will be searched."),(const char *) strGameID,(const char *) _fnmUserDir);
+        //InfoMessage(TRANS("No game files were found in /usr/share/%s/\n or %s\nThe home directory will be searched."),(const char *) strGameID,(const char *) _fnmUserDir);
 #endif
         struct passwd *pw = getpwuid(getuid());
         const char *_homedir = pw->pw_dir;
@@ -823,13 +824,14 @@
           close(_fd);
         } else {
           CPrintF(TRANSV("ERROR: Game data not ound!\n"));
-          _fnmUserDataPath = "";
+          _fnmApplicationPath = _fnmAdditionalDirPath;
+          sys_iGameDataNotFound = 1;
 #if defined(__OpenBSD__) || defined(__FreeBSD__)
           FatalError(TRANSV("Failed to search game data!\nPlease put the game data in the paths:\n/usr/local/share/%s/\n or %s\n or somewhere in your home directory\nSee the log for more details.\nGame log is here: ~/.local/share/Serious-Engine/%s/SeriousSam.log"),(const char *) strGameID,(const char *) _fnmUserDir,(const char *) strGameID);
 #elif defined(__NetBSD__)
           FatalError(TRANSV("Failed to search game data!\nPlease put the game data in the paths:\n/usr/pkg/share/%s/\n or %s\n or somewhere in your home directory\nSee the log for more details.\nGame log is here: ~/.local/share/Serious-Engine/%s/SeriousSam.log"),(const char *) strGameID,(const char *) _fnmUserDir,(const char *) strGameID);
 #else
-          FatalError(TRANSV("Failed to search game data!\nPlease put the game data in the paths:\n/usr/share/%s/\n or %s\n or somewhere in your home directory\nSee the log for more details.\nGame log is here: ~/.local/share/Serious-Engine/%s/SeriousSam.log"),(const char *) strGameID,(const char *) _fnmUserDir,(const char *) strGameID);
+          //FatalError(TRANSV("Failed to search game data!\nPlease put the game data in the paths:\n/usr/share/%s/\n or %s\n or somewhere in your home directory\nSee the log for more details.\nGame log is here: ~/.local/share/Serious-Engine/%s/SeriousSam.log"),(const char *) strGameID,(const char *) _fnmUserDir,(const char *) strGameID);
 #endif
         }
       } 
@@ -883,6 +885,7 @@
   CPrintF(TRANSV("Executable: %s\n"), (const char *) strExePath);
   CPrintF(TRANSV("Assumed engine data directory: %s\n"), (const char *) _fnmApplicationPath);
   CPrintF(TRANSV("Assumed mods library directory: %s\n"), (const char *) _fnmModLibPath);
+  CPrintF(TRANSV("Assumed additional data directory: %s\n"), (const char *) _fnmAdditionalDirPath);
 #endif
 
   CPrintF("\n");
@@ -932,7 +932,7 @@
   InitStreams();
   // keep mod name in sys cvar
   sys_strModName = _strModName;
-  sys_strModExt  = _strModExt;
+  sys_strModExt  = "MP";
 
 // checking of crc
 #if 0
